#+TITLE: My GNU Emacs configuration
#+AUTHOR: Pavel 'M4E5TR0' Matcula
#+STARTUP: odd

* Frame visual appearance

#+BEGIN_SRC emacs-lisp
(message "Loading frame visual appearance config...")
#+END_SRC

*** Built-in
***** Main packages

#+BEGIN_SRC emacs-lisp
  (column-number-mode 1)

  (setq echo-keystrokes 0.1)

  (setq-default cursor-type 'bar)
  (defun my-set-cursor-type ()
    (interactive)
    (if overwrite-mode
        (setq cursor-type 'box)
      (setq cursor-type 'bar)))
  (add-hook 'overwrite-mode-hook 'my-set-cursor-type)
  (setq-default cursor-in-non-selected-windows nil)

  (setq blink-cursor-delay 60)
  (setq blink-cursor-blinks 0)
  (blink-cursor-mode 1) ; NOTE: order matters

  (setq comment-auto-fill-only-comments t)
  (add-hook 'prog-mode-hook (lambda () (setq fill-column 132)
                              (turn-on-auto-fill)))
  (add-hook 'text-mode-hook (lambda () (setq fill-column 80)
                              (turn-on-visual-line-mode)))
  (req-package hl-line
    :demand t
    :config (global-hl-line-mode 1)
    (defun my-turn-off-hl-line-mode ()
      (interactive)
      (make-local-variable 'global-hl-line-mode)
      (setq global-hl-line-mode nil))
    (add-hook 'diff-mode-hook 'my-turn-off-hl-line-mode))

  (req-package linum
    :defer 1 ; NOTE: a bugfix for Emacs daemon
    :config (global-linum-mode 1))

  (req-package menu-bar
    :demand t
    :config (menu-bar-mode -1))

  (req-package scroll-bar
    :demand t
    :config (if x-toolkit-scroll-bars
                (scroll-bar-mode -1)
              (set-scroll-bar-mode 'right)
              (scroll-bar-mode 1)))

  (req-package tool-bar
    :demand t
    :config (tool-bar-mode -1))

  (req-package tooltip
    :demand t
    :config (tooltip-mode 1)
    (setq x-gtk-use-system-tooltips nil))

  (req-package whitespace
    :defer t
    :commands (whitespace-mode))
#+END_SRC

***** Extensions

#+BEGIN_SRC emacs-lisp
  (req-package hlinum
    :defer t
    :commands (hlinum-activate)
    :init
    (add-hook 'linum-mode-hook 'hlinum-activate))

  (req-package visual-fill-column
    :defer t
    :commands (turn-on-visual-fill-column-mode)
    :init
    (add-hook 'visual-line-mode-hook 'turn-on-visual-fill-column-mode)
    :config
    (setq-default visual-fill-column-fringes-outside-margins nil))
#+END_SRC

*** Third-party

#+BEGIN_SRC emacs-lisp
  (req-package diminish
    :demand t
    :config
    (add-hook 'visual-line-mode-hook (lambda() (diminish 'visual-line-mode))))

  (req-package tabbar
    :demand t
    :config (tabbar-mode 1)
    (setq tabbar-use-images nil)
    (setq tabbar-scroll-left-button '((" <") " ="))
    (setq tabbar-scroll-right-button '(("> ") "= "))
    (defun my-get-tab-label (tab)
      (concat " " (tabbar-buffer-tab-label tab) " "))
    (setq tabbar-tab-label-function 'my-get-tab-label))
#+END_SRC

* Major working modes

#+BEGIN_SRC emacs-lisp
(message "Loading major working modes config...")
#+END_SRC

*** Built-in
***** Main packages

#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-screen t)
  (setq initial-scratch-message nil)

  (req-package fortran
    :defer t
    :mode (("\\.[fF]\\(?:90\\|95\\|03\\|08\\)\\'" . f90-mode)
           ("\\.f\\(?:or\\|pp\\|tn\\|i\\)\\'" . fortran-mode)
           ("\\.F\\(?:OR\\|PP\\|TN\\)\\'" . fortran-mode)))
#+END_SRC

***** Extensions

#+BEGIN_SRC emacs-lisp
  (req-package paradox
    :require (async)
    :defer t
    :commands (paradox-list-packages
               paradox-upgrade-packages)
    :config
    (setq paradox-automatically-star nil)
    (load (expand-file-name "paradox-config.el"
                            (expand-file-name "personal"
                                              user-emacs-directory)) :noerror))
#+END_SRC

*** Built-in: org-mode
***** Main package

#+BEGIN_SRC emacs-lisp
  (req-package org
    :defer t
    :mode ("\\.org\\'" . org-mode)
    :config
    (setq org-odd-levels-only t)
    (setq org-hide-leading-stars t)
    (setq org-src-fontify-natively t)
    (setq org-html-htmlize-output-type 'css)
    (setq org-html-htmlize-font-prefix "hljs-")
    (org-babel-do-load-languages
      'org-babel-load-languages
      '((emacs-lisp . t) (C . t) (shell . t) (latex . t))))
#+END_SRC

***** Extensions

#+BEGIN_SRC emacs-lisp
  (req-package htmlize
    :demand t ; TODO: defer?
    :config
    (setq htmlize-ignore-face-size t)) ; TESTME

  (req-package org-tree-slide
    :defer t
    :commands (org-tree-slide-mode))

  (req-package ox-ioslide
    :demand t ; TODO: defer?
    :commands (org-ioslide-export-to-html))

  (req-package ox-reveal
    :demand t ; TODO: defer?
    :commands (org-reveal-export-to-html
               org-reveal-export-to-html-and-browse)
    :config
    (setq org-reveal-root custom-org-reveal-root))
#+END_SRC

*** Built-in: dired
***** Main package

#+BEGIN_SRC emacs-lisp
  (req-package dired
    :config
    (put 'dired-find-alternate-file 'disabled nil))
#+END_SRC

***** Extensions

#+BEGIN_SRC emacs-lisp
  (req-package wdired
    :defer t
    :commands (wdired-change-to-wdired-mode)
    :config
    (setq wdired-allow-to-change-permissions t))
#+END_SRC

*** Built-in: ediff

#+BEGIN_SRC emacs-lisp
  (req-package ediff
    :config
    (setq ediff-window-setup-function 'ediff-setup-windows-plain)
    (setq ediff-split-window-function 'split-window-horizontally))
#+END_SRC

*** Third-party

#+BEGIN_SRC emacs-lisp
  (req-package cmake-mode
    :defer t
    :mode (("CMakeLists\\.txt\\'" . cmake-mode)
           ("\\.cmake\\'" . cmake-mode)))

  (req-package dummy-h-mode
    :defer t
    :mode "\\.h$"
    :config
    (setq dummy-h-mode-default-major-mode 'c++-mode))

  ;; (req-package git-commit-mode :disabled t
  ;;   :defer t
  ;;   :mode (("/COMMIT_EDITMSG\\'" . git-commit-mode)
  ;;          ("/MERGE_MSG\\'" . git-commit-mode)))

  ;; (req-package git-rebase-mode :disabled t
  ;;   :defer t
  ;;   :mode ("/git-rebase-todo\\'" . git-rebase-mode))

  (req-package gitattributes-mode
    :defer t
    :mode (("/git/attributes\\'" . gitattributes-mode)
           ("/\\.git/info/attributes\\'" . gitattributes-mode)
           ("/\\.gitattributes\\'" . gitattributes-mode)))

  (req-package gitconfig-mode
    :defer t
    :mode (("/git/config\\'" . gitconfig-mode)
           ("/\\.git/config\\'" . gitconfig-mode)
           ("/\\.gitconfig\\'" . gitconfig-mode)))

  (req-package gitignore-mode
    :defer t
    :mode (("/git/ignore\\'" . gitignore-mode)
           ("/\\.git/info/exclude\\'" . gitignore-mode)
           ("/\\.gitignore\\'" . gitignore-mode)))

  (req-package gpss-mode
    :require (highlight-like-vim)
    :load-path custom-gpss-mode-load-path
    :pin manual
    :defer t
    :mode "\\.gpss$")

  (req-package lua-mode
    :defer t
    :mode "\\.lua$"
    :interpreter "lua")

  (req-package markdown-mode
    :defer t
    :mode (("\\.text\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode)
           ("\\.md\\'" . markdown-mode)))

  (req-package muttrc-mode
    :defer t
    :mode "[Mm]uttrc\\'")

  (req-package pkgbuild-mode
    :if (eq system-type 'gnu/linux)
    :defer t
    :mode "/PKGBUILD$")

  (req-package systemd
    :if (eq system-type 'gnu/linux)
    :defer t
    :mode (("\\.service\\'" . systemd-mode)))
#+END_SRC

* Completion in minibuffer

#+BEGIN_SRC emacs-lisp
(message "Loading completion in minibuffer config...")
#+END_SRC

*** Built-in

#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

*** Built-in: ido
***** Main package

#+BEGIN_SRC emacs-lisp
  (req-package ido
    :demand t
    :config (ido-mode 1)
    (ido-everywhere 1))
#+END_SRC

***** Extensions

#+BEGIN_SRC emacs-lisp
  (req-package ido-ubiquitous
    :require (ido)
    :demand t
    :config (ido-ubiquitous-mode 1))

  (req-package smex
    :require (ido)
    :demand t
    :bind (("M-x" . smex)
           ("M-X" . smex-major-mode-commands))
    :config (smex-initialize))
#+END_SRC

*** Built-in: icomplete

#+BEGIN_SRC emacs-lisp
  (req-package icomplete :disabled t
    :demand t
    :config (icomplete-mode 1))
#+END_SRC

*** TODO Helm
* Auto parentheses

#+BEGIN_SRC emacs-lisp
(message "Loading auto parentheses config...")
#+END_SRC

*** Built-in: electric
   
#+BEGIN_SRC emacs-lisp
  (req-package elec-pair
    :demand t
    :config (electric-pair-mode 1))
#+END_SRC

*** Autopair

#+BEGIN_SRC emacs-lisp
  (req-package autopair :disabled t
    :demand t
    :config (autopair-global-mode 1))
#+END_SRC

*** Smartparens

#+BEGIN_SRC emacs-lisp
  (req-package smartparens-config :disabled t
    :ensure smartparens
    :demand t
    :config (smartparens-global-mode 1)
    (defun my-newline-and-indent (&rest ignore)
      (newline)
      (indent-according-to-mode)
      (forward-line -1)
      (indent-according-to-mode))
    (sp-local-pair 'c-mode "{" nil :post-handlers '((my-newline-and-indent "RET")))
    (sp-local-pair 'c++-mode "{" nil :post-handlers '((my-newline-and-indent "RET"))))
#+END_SRC

* Code semantic engines
*** Built-in: CEDET

#+BEGIN_SRC emacs-lisp
  (req-package cedet :disabled t
    :config
    (load-file (expand-file-name "cedet-config.el"
                                 (expand-file-name "init.d"
                                                   user-emacs-directory)))
    (load-file (expand-file-name "cedet-custom.el"
                                 (expand-file-name "init.d"
                                                   user-emacs-directory))))
#+END_SRC

*** ycmd
   
#+BEGIN_SRC emacs-lisp
  (req-package ycmd :disabled t
    :demand t
    :config (global-ycmd-mode 1))
#+END_SRC

*** Irony

#+BEGIN_SRC emacs-lisp
  (req-package irony
    :defer t
    :commands (irony-mode)
    :init
    (add-hook 'c-mode-hook 'irony-mode)
    (add-hook 'c++-mode-hook 'irony-mode)
    (add-hook 'objc-mode-hook 'irony-mode)
    :config
    (defun my-set-irony-mode-keys ()
      (define-key irony-mode-map [remap completion-at-point]
        'irony-completion-at-point-async)
      (define-key irony-mode-map [remap complete-symbol]
        'irony-completion-at-point-async))
    (add-hook 'irony-mode-hook 'my-set-irony-mode-keys)
    (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)
    (when (boundp 'w32-pipe-read-delay)
      (setq w32-pipe-read-delay 0))
    (when (boundp 'w32-pipe-buffer-size)
      (setq irony-server-w32-pipe-buffer-size (* 64 1024)))
    (add-hook 'c++-mode-hook
              (lambda()
                (make-local-variable 'irony-additional-clang-options)
                (setq irony-additional-clang-options '("-std=c++14")))))
#+END_SRC
   
* Pop-up completion at point

#+BEGIN_SRC emacs-lisp
(message "Loading pop-up completion at point config...")
#+END_SRC

*** TODO Auto-complete
***** Main package

#+BEGIN_SRC emacs-lisp
  (req-package auto-complete-config :disabled t
    :ensure auto-complete
    :demand t
    :config (ac-config-default))
#+END_SRC

***** Extensions
*** Company
***** Main package

#+BEGIN_SRC emacs-lisp
  (req-package company
    :demand t
    :config (global-company-mode 1))
#+END_SRC

***** Extensions

#+BEGIN_SRC emacs-lisp
  (req-package company-c-headers
    :require (company company-irony) ; NOTE: a bugfix for the latter 
    ;; :require (company company-ycmd) ; NOTE: a bugfix for the latter 
    :demand t ; TODO: defer?
    :config
    (add-to-list 'company-backends 'company-c-headers))

  (req-package company-quickhelp :disabled t ; FIXME: waiting for a fix
    :require (company)
    :defer t
    :commands (company-quickhelp-mode)
    :init
    (add-hook 'company-mode-hook (lambda() (company-quickhelp-mode 1))))
#+END_SRC

***** Extensions: ycmd

#+BEGIN_SRC emacs-lisp
  (req-package company-ycmd
    :require (company ycmd)
    :demand t ; TODO: defer?
    :config (company-ycmd-setup))
#+END_SRC

***** Extensions: Irony

#+BEGIN_SRC emacs-lisp
  (req-package company-irony
    :require (company irony yasnippet)
    :demand t ; TODO: defer?
    :config
    (add-to-list 'company-backends 'company-irony)
    (add-hook 'irony-mode-hook 'company-irony-setup-begin-commands))
#+END_SRC

* Echo area prompt at point

#+BEGIN_SRC emacs-lisp
(message "Loading echo area prompt at point config...")
#+END_SRC

*** Built-in: ElDoc
***** Main package

#+BEGIN_SRC emacs-lisp
  (req-package eldoc
    :if (not (version< emacs-version "24.4"))
    :demand t
    :config (global-eldoc-mode 1))

  (req-package eldoc
    :if (version< emacs-version "24.4")
    :defer t
    :commands (turn-on-eldoc-mode)
    :init
    (add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
    (add-hook 'lisp-interaction-mode-hook 'turn-on-eldoc-mode))
#+END_SRC

***** Extensions

#+BEGIN_SRC emacs-lisp
  (req-package c-eldoc :disabled t
    :defer t
    :commands (c-turn-on-eldoc-mode)
    :init
    (add-hook 'c-mode-hook 'c-turn-on-eldoc-mode)
    (add-hook 'c++-mode-hook 'c-turn-on-eldoc-mode))
#+END_SRC

***** Extensions: Irony

#+BEGIN_SRC emacs-lisp
  (req-package irony-eldoc
    :require (irony)
    :defer t
    :commands (irony-eldoc)
    :init
    (add-hook 'irony-mode-hook 'irony-eldoc))
#+END_SRC

* Text objects highlight

#+BEGIN_SRC emacs-lisp
(message "Loading text objects highlight config...")
#+END_SRC

*** Built-in

#+BEGIN_SRC emacs-lisp
  (req-package paren
    :demand t
    :config (show-paren-mode 1))
#+END_SRC

*** Third-party

#+BEGIN_SRC emacs-lisp
  (req-package rainbow-mode
    :defer t
    :commands (rainbow-mode)
    :config
    (setq rainbow-x-colors nil))
#+END_SRC

* Code syntax highlight

#+BEGIN_SRC emacs-lisp
(message "Loading code syntax highlight config...")
#+END_SRC

*** Built-in: font-lock
***** Main package

#+BEGIN_SRC emacs-lisp
  (req-package font-core
    :demand t
    :config (global-font-lock-mode 1))
#+END_SRC

***** Extensions

#+BEGIN_SRC emacs-lisp
  (req-package cmake-font-lock
    :require (cmake-mode)
    :defer t
    :commands (cmake-font-lock-activate)
    :init
    (add-hook 'cmake-mode-hook 'cmake-font-lock-activate))

  (use-package doxymacs
    :if (locate-library "doxymacs") ; BUGFIX: for :init execution
    :defer t
    :commands (doxymacs-mode doxymacs-font-lock)
    :init
    (add-hook 'c-mode-common-hook 'doxymacs-mode)
    (defun my-add-doxymacs-font-lock ()
      (if (or (eq major-mode 'c-mode)
              (eq major-mode 'c++-mode))
          (doxymacs-font-lock)))
    (add-hook 'font-lock-mode-hook 'my-add-doxymacs-font-lock))

  (req-package-force highlight-like-vim
    :load-path custom-hl-like-vim-load-path
    :pin manual
    :demand t
    :config
    (load-file (expand-file-name "font-lock-config.el"
                                 (expand-file-name "init.d"
                                                   user-emacs-directory))))

  (req-package highlight-numbers :disabled t
    :demand t
    :config (highlight-numbers-mode 1))
#+END_SRC

*** Third-party

#+BEGIN_SRC emacs-lisp
  (req-package highlight-escape-sequences
    ;; :load-path custom-hes-mode-load-path
    ;; :pin manual
    :demand t
    :config (hes-mode 1)) ; NOTE: order matters

  (req-package highlight-operators
    :defer t
    :commands (highlight-operators-mode)
    :init
    (add-hook 'c-mode-common-hook 'highlight-operators-mode))

  (req-package paren-face
    :demand t
    :config (global-paren-face-mode 1))
#+END_SRC

* Text spelling check

#+BEGIN_SRC emacs-lisp
(message "Loading text spelling check config...")
#+END_SRC

*** TODO Built-in: Flyspell
***** Main package

#+BEGIN_SRC emacs-lisp
  (req-package flyspell
    :defer t
    :commands (flyspell-prog-mode)
    :init
    (add-hook 'prog-mode-hook 'flyspell-prog-mode))
#+END_SRC

***** Extensions
* Code syntax check

#+BEGIN_SRC emacs-lisp
(message "Loading code syntax check config...")
#+END_SRC

*** Built-in: Flymake
***** Main package

#+BEGIN_SRC emacs-lisp
  (req-package flymake :disabled t
    :defer t
    :commands (flymake-find-file-hook)
    :init
    (add-hook 'find-file-hook 'flymake-find-file-hook)
    :config
    (add-to-list 'flymake-allowed-file-name-masks '("\\.[fF]\\(?:90\\|95\\|03\\|08\\)?\\'" flymake-simple-make-init)) ; XXX
    (add-to-list 'flymake-allowed-file-name-masks '("\\.f\\(?:or\\|pp\\|tn\\)\\'" flymake-simple-make-init)) ; XXX
    (add-to-list 'flymake-allowed-file-name-masks '("\\.F\\(?:OR\\|PP\\|TN\\)\\'" flymake-simple-make-init))) ; XXX
#+END_SRC

***** Extensions

#+BEGIN_SRC emacs-lisp
  (req-package flymake-lua
    :require (flymake lua-mode)
    :defer t
    :commands (flymake-lua-load)
    :init
    (add-hook 'lua-mode-hook 'flymake-lua-load))

  (req-package flymake-shell
    :require (flymake)
    :defer t
    :commands (flymake-shell-load)
    :init
    (add-hook 'sh-set-shell-hook 'flymake-shell-load))
#+END_SRC

*** Flycheck
***** Main package

#+BEGIN_SRC emacs-lisp
  (req-package flycheck
    :demand t
    :config (global-flycheck-mode 1)
    (add-hook 'c++-mode-hook
              (lambda()
                (setq flycheck-clang-language-standard "c++11")
                (setq flycheck-gcc-language-standard "c++11"))))
#+END_SRC

***** Extensions: ycmd

#+BEGIN_SRC emacs-lisp
  (req-package flycheck-ycmd
    :require (flycheck ycmd)
    :demand t ; TODO: defer?
    :config (flycheck-ycmd-setup))
#+END_SRC

***** Extensions: Irony

#+BEGIN_SRC emacs-lisp
  (req-package flycheck-irony
    :require (flycheck irony)
    :demand t ; TODO: defer?
    :config (flycheck-irony-setup))
#+END_SRC

* Misc editing goodies

#+BEGIN_SRC emacs-lisp
(message "Loading misc editing goodies config...")
#+END_SRC

*** Built-in

#+BEGIN_SRC emacs-lisp
  (setq scroll-preserve-screen-position t)

  (req-package winner
    :demand t
    :config (winner-mode 1))
#+END_SRC

*** Third-party

#+BEGIN_SRC emacs-lisp
  (req-package ace-jump-mode
    :defer t
    :bind ("C-c SPC" . ace-jump-mode))

  (req-package golden-ratio
    :demand t
    :config (golden-ratio-mode 1)
    (setq golden-ratio-auto-scale t)
    (add-to-list 'golden-ratio-exclude-modes 'diff-mode)
    (add-to-list 'golden-ratio-exclude-modes 'ediff-mode)
    :diminish golden-ratio-mode)
#+END_SRC

* Misc coding goodies

#+BEGIN_SRC emacs-lisp
(message "Loading misc coding goodies config...")
#+END_SRC

*** Built-in

#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)

  (req-package electric :disabled t
    :demand t
    :config (electric-indent-mode 1))

  (req-package subword :disabled t
    :demand t
    :config (global-subword-mode 1)
    :diminish subword-mode)
#+END_SRC

*** Third-party

#+BEGIN_SRC emacs-lisp
  (req-package aggressive-indent
    :demand t
    :config (global-aggressive-indent-mode 1)
    ;; (add-to-list
    ;;  'aggressive-indent-dont-indent-if
    ;;  '(and (derived-mode-p 'c++-mode)
    ;;        (null (string-match "\\([;{}]\\|\\b\\(if\\|for\\|while\\)\\b\\)"
    ;;                            (thing-at-point 'line)))))
    :diminish aggressive-indent-mode)

  (req-package dtrt-indent
    :demand t
    :config (dtrt-indent-mode 1))

  (req-package expand-region
    :defer t
    :bind ("C-=" . er/expand-region))

  (req-package google-c-style
    :defer t
    :commands (google-set-c-style google-make-newline-indent)
    :init
    (add-hook 'c-mode-common-hook 'google-set-c-style)
    (add-hook 'c-mode-common-hook 'google-make-newline-indent))

  (req-package indent-guide
    :demand t
    :config (indent-guide-global-mode 1)
    :diminish indent-guide-mode)

  (req-package magit
    :defer t
    :commands (magit-status))

  (req-package syntax-subword
    :demand t
    :config (global-syntax-subword-mode 1))

  (req-package yasnippet
    :demand t
    :config (yas-global-mode 1)
    :mode ("/snippets/" . snippet-mode))
#+END_SRC
